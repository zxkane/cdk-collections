// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Outputs": {
    "HttpAPIEndpoint": {
      "Description": "url of http api",
      "Value": {
        "Fn::GetAtt": [
          "httpapitosqs",
          "ApiEndpoint",
        ],
      },
    },
    "resttosqsEndpointB1E7811A": {
      "Export": {
        "Name": "APIEndpoint",
      },
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "resttosqsE0E272C0",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "resttosqsDeploymentStageprod83FF0214",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "DefaultStage": {
      "Properties": {
        "ApiId": {
          "Ref": "httpapitosqs",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "apigatewayroleDefaultPolicyFB5F907E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "eventqueue6D4A6A10",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "apigatewayroleDefaultPolicyFB5F907E",
        "Roles": [
          {
            "Ref": "apigatewayroleE6D48DBD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "apigatewayroleE6D48DBD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "eventqueue6D4A6A10": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "SqsManagedSseEnabled": true,
        "VisibilityTimeout": 30,
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "httpapitosqs": {
      "Properties": {
        "Body": {
          "components": {
            "schemas": {
              "events": {
                "properties": {
                  "app_key": {
                    "example": "d7d3f96f594f26acd566577a1501e3c82c7ba8fc",
                    "type": "string",
                  },
                  "device_id": {
                    "example": "b452f74e-4770-48f9-b850-eac57240d547",
                    "type": "string",
                  },
                },
                "required": [
                  "app_key",
                  "device_id",
                ],
                "type": "object",
              },
            },
          },
          "info": {
            "license": {
              "name": "Apache 2.0",
              "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
            },
            "title": "httpapi-to-sqs",
            "version": "v1.0.0",
          },
          "openapi": "3.0.3",
          "paths": {
            "/i": {
              "post": {
                "description": "Writing sessions, metrics and events",
                "operationId": "sendEvents",
                "parameters": [
                  {
                    "in": "header",
                    "name": "content-type",
                    "required": true,
                    "schema": {
                      "type": "string",
                    },
                  },
                ],
                "requestBody": {
                  "content": {
                    "application/x-www-form-urlencoded": {
                      "schema": {
                        "$ref": "#/components/schemas/events",
                      },
                    },
                  },
                  "required": true,
                },
                "responses": {
                  "200": {
                    "content": {},
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {
                          "type": "string",
                        },
                      },
                      "Content-Type": {
                        "schema": {
                          "type": "string",
                        },
                      },
                    },
                  },
                  "400": {
                    "content": {},
                    "description": "400 response",
                    "headers": {
                      "Content-Type": {
                        "schema": {
                          "type": "string",
                        },
                      },
                    },
                  },
                  "404": {
                    "content": {},
                    "description": "404 response",
                    "headers": {
                      "Content-Type": {
                        "schema": {
                          "type": "string",
                        },
                      },
                    },
                  },
                  "500": {
                    "content": {},
                    "description": "500 response",
                    "headers": {
                      "Content-Type": {
                        "schema": {
                          "type": "string",
                        },
                      },
                    },
                  },
                },
                "x-amazon-apigateway-integration": {
                  "connectionType": "INTERNET",
                  "credentials": {
                    "Fn::GetAtt": [
                      "apigatewayroleE6D48DBD",
                      "Arn",
                    ],
                  },
                  "integrationSubtype": "SQS-SendMessage",
                  "payloadFormatVersion": "1.0",
                  "requestParameters": {
                    "MessageAttributes": "{
  "sourceIp":{
    "StringValue":"\${context.identity.sourceIp}",
    "DataType":"String"
  },
  "apiTimestamp":{
    "StringValue":"\${context.requestTimeEpoch}",
    "DataType":"Number"
  }
}",
                    "MessageBody": "$request.body",
                    "QueueUrl": {
                      "Ref": "eventqueue6D4A6A10",
                    },
                  },
                  "timeoutInMillis": 2000,
                  "type": "aws_proxy",
                },
                "x-amazon-apigateway-request-validator": "requestvalidator",
              },
            },
          },
          "servers": [
            {
              "url": "",
              "variables": {
                "basePath": {
                  "default": "",
                },
              },
            },
          ],
          "x-amazon-apigateway-cors": {
            "allowHeaders": [
              "x-apigateway-header",
              "x-amz-date",
              "content-type",
            ],
            "allowMethods": [
              "POST",
              "OPTIONS",
            ],
            "allowOrigins": [
              "*",
            ],
            "exposeHeaders": [
              "x-apigateway-header",
              "x-amz-date",
              "content-type",
            ],
            "maxAge": 3600,
          },
          "x-amazon-apigateway-request-validators": {
            "requestvalidator": {
              "validateRequestBody": false,
              "validateRequestParameters": true,
            },
          },
        },
        "FailOnWarnings": false,
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "resttosqsAccount9A1D9E43": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "resttosqsE0E272C0",
      ],
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "resttosqsCloudWatchRoleC489D690",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "resttosqsCloudWatchRoleC489D690": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "resttosqsDeployment1EC2FEF396739e7fa377123903c7780f49efbf07": {
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "resttosqsE0E272C0",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "resttosqsDeploymentStageprod83FF0214": {
      "Properties": {
        "DeploymentId": {
          "Ref": "resttosqsDeployment1EC2FEF396739e7fa377123903c7780f49efbf07",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "ERROR",
            "MetricsEnabled": true,
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "resttosqsE0E272C0",
        },
        "StageName": "prod",
        "TracingEnabled": false,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "resttosqsE0E272C0": {
      "Properties": {
        "Body": {
          "Fn::Join": [
            "",
            [
              "openapi: "3.0.3"
info:
  title: "restful-api-to-sqs"
  version: "v1.0.0"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"  
servers:
- url:
  variables:
    basePath:
      default: ""
paths:
  /i:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |-
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                {}
    post:
      description: "Writing sessions, metrics and events"
      operationId: "sendEvents"
      parameters:
      - name: "content-type"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/events"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
        "200":
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
        "500":
          description: "500 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-request-validator: "requestvalidator"
      x-amazon-apigateway-integration:
        credentials: "",
              {
                "Fn::GetAtt": [
                  "apigatewayroleE6D48DBD",
                  "Arn",
                ],
              },
              ""
        httpMethod: "POST"
        uri: "arn:\${AWS::Partition}:apigateway:\${AWS::Region}:sqs:path/\${AWS::AccountId}/",
              {
                "Fn::GetAtt": [
                  "eventqueue6D4A6A10",
                  "QueueName",
                ],
              },
              ""
        responses:
          "4\\\\d{2}":
            statusCode: "400"
            responseTemplates:
              application/json: "#if($input.path('$.Error.Code') == \\"InvalidMessageContents\\"\\
                )\\n{\\n  \\"message\\": \\"The message contains characters outside the\\
                \\ allowed set.\\"\\n}\\n#elseif($input.path('$.Error.Code') == \\"AWS.SimpleQueueService.UnsupportedOperation\\"\\
                )\\n{\\n  \\"message\\": \\"Unsupported operation.\\"\\n}\\n#else\\n{\\n  \\"\\
                message\\": \\"$input.path('$.Error.Code')\\"\\n}\\n#end"
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "{\\n  \\"result\\": \\"Success\\"\\n}\\n"
            responseParameters:
              "method.response.header.Access-Control-Allow-Origin": '''*'''              
          "5\\\\d{2}":
            statusCode: "500"
            responseTemplates:
              application/json: "{\\"result\\": \\"internal error\\"}"
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/x-www-form-urlencoded: "Action=SendMessage&MessageBody=$util.base64Encode($input.body)\\
            &MessageAttribute.1.Name=encoding&MessageAttribute.1.Value.StringValue=base64&MessageAttribute.1.Value.DataType=String\\
            &MessageAttribute.2.Name=sourceIp&MessageAttribute.2.Value.StringValue=$context.identity.sourceIp&MessageAttribute.2.Value.DataType=String\\
            &MessageAttribute.3.Name=apiTimestamp&MessageAttribute.3.Value.StringValue=$context.requestTimeEpoch&MessageAttribute.3.Value.DataType=Number"
        passthroughBehavior: "when_no_match"
        type: "aws"
        timeoutInMillis: 2000
components:
  schemas:
    events:
      type: object
      required:
        - app_key
        - device_id
      properties:
        app_key:
          type: string
          example: d7d3f96f594f26acd566577a1501e3c82c7ba8fc
        device_id:
          type: string
          example: b452f74e-4770-48f9-b850-eac57240d547
x-amazon-apigateway-request-validators:
  requestvalidator:
    validateRequestParameters: true
    validateRequestBody: false",
            ],
          ],
        },
        "Name": "rest-to-sqs",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
