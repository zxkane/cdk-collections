// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "TODOAPI": Object {
      "Description": "url of TODO endpoint",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "todoappbackendapi8D2202DC",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "todoappbackendapiDeploymentStageprod7F1D5431",
            },
            "/todo",
          ],
        ],
      },
    },
    "TODOAppUrl": Object {
      "Description": "url of TODO app",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Fn::GetAtt": Array [
                "controlplaneCloudFrontDistributionBB89BCF1",
                "DomainName",
              ],
            },
          ],
        ],
      },
    },
    "UserPoolDomain": Object {
      "Description": "url of user pool domain",
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "TODOUserPoolCognitoDomain4908E0CE",
            },
            ".auth.",
            Object {
              "Ref": "AWS::Region",
            },
            ".amazoncognito.com",
          ],
        ],
      },
    },
    "todoappbackendapiEndpoint8BBE7B48": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "todoappbackendapi8D2202DC",
            },
            ".execute-api.",
            Object {
              "Ref": "AWS::Region",
            },
            ".",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "todoappbackendapiDeploymentStageprod7F1D5431",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": Object {
      "DependsOn": Array [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6dbd112fe448437b3438da4382c72fccbb7d2ee1543db222620d7447fffebc50.zip",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CreateAwsExports353D691F": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CreateAwsExportsCustomResourcePolicyE986A674",
      ],
      "Properties": Object {
        "Create": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"S3\\",\\"action\\":\\"putObject\\",\\"parameters\\":{\\"Body\\":\\"{\\\\n  \\\\\\"aws_project_region\\\\\\": \\\\\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\\\\\",\\\\n  \\\\\\"Auth\\\\\\": {\\\\n    \\\\\\"region\\\\\\": \\\\\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\\\\\",\\\\n    \\\\\\"userPoolId\\\\\\": \\\\\\"",
              Object {
                "Ref": "TODOUserPoolB2242677",
              },
              "\\\\\\",\\\\n    \\\\\\"userPoolWebClientId\\\\\\": \\\\\\"",
              Object {
                "Ref": "userpoolclientDA356A8E",
              },
              "\\\\\\",\\\\n    \\\\\\"authenticationFlowType\\\\\\": \\\\\\"USER_SRP_AUTH\\\\\\",\\\\n    \\\\\\"oauth\\\\\\": {\\\\n      \\\\\\"name\\\\\\": \\\\\\"undefined\\\\\\",\\\\n      \\\\\\"domain\\\\\\": \\\\\\"",
              Object {
                "Ref": "TODOUserPoolCognitoDomain4908E0CE",
              },
              ".auth.",
              Object {
                "Ref": "AWS::Region",
              },
              ".amazoncognito.com\\\\\\",\\\\n      \\\\\\"scope\\\\\\": [\\\\\\"email\\\\\\", \\\\\\"openid\\\\\\", \\\\\\"aws.cognito.signin.user.admin\\\\\\", \\\\\\"profile\\\\\\"],\\\\n      \\\\\\"redirectSignIn\\\\\\": \\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "controlplaneCloudFrontDistributionBB89BCF1",
                  "DomainName",
                ],
              },
              "\\\\\\",\\\\n      \\\\\\"redirectSignOut\\\\\\": \\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "controlplaneCloudFrontDistributionBB89BCF1",
                  "DomainName",
                ],
              },
              "\\\\\\",\\\\n      \\\\\\"responseType\\\\\\": \\\\\\"code\\\\\\"\\\\n    }\\\\n  },\\\\n  \\\\\\"API\\\\\\": {\\\\n    \\\\\\"endpoints\\\\\\": [\\\\n      {\\\\n        \\\\\\"name\\\\\\": \\\\\\"backend-api\\\\\\",\\\\n        \\\\\\"endpoint\\\\\\": \\\\\\"https://",
              Object {
                "Fn::GetAtt": Array [
                  "controlplaneCloudFrontDistributionBB89BCF1",
                  "DomainName",
                ],
              },
              "/prod/\\\\\\"\\\\n      }\\\\n    ]\\\\n  }\\\\n}\\",\\"Bucket\\":\\"",
              Object {
                "Ref": "controlplaneS3Bucket2CBB3164",
              },
              "\\",\\"Key\\":\\"aws-exports.json\\"},\\"physicalResourceId\\":{\\"id\\":\\"cd8c24d1b341179cf841f05f3171c4dde3bd0e0c942887140a18ead08b76f6d4\\"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": false,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"service\\":\\"S3\\",\\"action\\":\\"putObject\\",\\"parameters\\":{\\"Body\\":\\"{\\\\n  \\\\\\"aws_project_region\\\\\\": \\\\\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\\\\\",\\\\n  \\\\\\"Auth\\\\\\": {\\\\n    \\\\\\"region\\\\\\": \\\\\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\\\\\",\\\\n    \\\\\\"userPoolId\\\\\\": \\\\\\"",
              Object {
                "Ref": "TODOUserPoolB2242677",
              },
              "\\\\\\",\\\\n    \\\\\\"userPoolWebClientId\\\\\\": \\\\\\"",
              Object {
                "Ref": "userpoolclientDA356A8E",
              },
              "\\\\\\",\\\\n    \\\\\\"authenticationFlowType\\\\\\": \\\\\\"USER_SRP_AUTH\\\\\\",\\\\n    \\\\\\"oauth\\\\\\": {\\\\n      \\\\\\"name\\\\\\": \\\\\\"undefined\\\\\\",\\\\n      \\\\\\"domain\\\\\\": \\\\\\"",
              Object {
                "Ref": "TODOUserPoolCognitoDomain4908E0CE",
              },
              ".auth.",
              Object {
                "Ref": "AWS::Region",
              },
              ".amazoncognito.com\\\\\\",\\\\n      \\\\\\"scope\\\\\\": [\\\\\\"email\\\\\\", \\\\\\"openid\\\\\\", \\\\\\"aws.cognito.signin.user.admin\\\\\\", \\\\\\"profile\\\\\\"],\\\\n      \\\\\\"redirectSignIn\\\\\\": \\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "controlplaneCloudFrontDistributionBB89BCF1",
                  "DomainName",
                ],
              },
              "\\\\\\",\\\\n      \\\\\\"redirectSignOut\\\\\\": \\\\\\"",
              Object {
                "Fn::GetAtt": Array [
                  "controlplaneCloudFrontDistributionBB89BCF1",
                  "DomainName",
                ],
              },
              "\\\\\\",\\\\n      \\\\\\"responseType\\\\\\": \\\\\\"code\\\\\\"\\\\n    }\\\\n  },\\\\n  \\\\\\"API\\\\\\": {\\\\n    \\\\\\"endpoints\\\\\\": [\\\\n      {\\\\n        \\\\\\"name\\\\\\": \\\\\\"backend-api\\\\\\",\\\\n        \\\\\\"endpoint\\\\\\": \\\\\\"https://",
              Object {
                "Fn::GetAtt": Array [
                  "controlplaneCloudFrontDistributionBB89BCF1",
                  "DomainName",
                ],
              },
              "/prod/\\\\\\"\\\\n      }\\\\n    ]\\\\n  }\\\\n}\\",\\"Bucket\\":\\"",
              Object {
                "Ref": "controlplaneS3Bucket2CBB3164",
              },
              "\\",\\"Key\\":\\"aws-exports.json\\"},\\"physicalResourceId\\":{\\"id\\":\\"cd8c24d1b341179cf841f05f3171c4dde3bd0e0c942887140a18ead08b76f6d4\\"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CreateAwsExportsCustomResourcePolicyE986A674": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "controlplaneS3Bucket2CBB3164",
                        "Arn",
                      ],
                    },
                    "/aws-exports.json",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CreateAwsExportsCustomResourcePolicyE986A674",
        "Roles": Array [
          Object {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": Object {
      "DependsOn": Array [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "f98b78092dcdd31f5e6d47489beb5f804d4835ef86a8085d0a2053cb9ae711da.zip",
        },
        "Handler": "index.handler",
        "Layers": Array [
          Object {
            "Ref": "DeployWebsiteAwsCliLayer17DBC421",
          },
        ],
        "Role": Object {
          "Fn::GetAtt": Array [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "controlplaneS3Bucket2CBB3164",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "controlplaneS3Bucket2CBB3164",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": Array [
          Object {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "DeployWebsiteAwsCliLayer17DBC421": Object {
      "DependsOn": Array [
        "CreateAwsExportsCustomResourcePolicyE986A674",
        "CreateAwsExports353D691F",
      ],
      "Properties": Object {
        "Content": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "731f24951dbe4e08bfc519dd7c23a4f7158528bd5557e38437b08292ab2a873c.zip",
        },
        "Description": "/opt/awscli/aws",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "DeployWebsiteCustomResourceD116527B": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CreateAwsExportsCustomResourcePolicyE986A674",
        "CreateAwsExports353D691F",
      ],
      "Properties": Object {
        "DestinationBucketKeyPrefix": "/",
        "DestinationBucketName": Object {
          "Ref": "controlplaneS3Bucket2CBB3164",
        },
        "DistributionId": Object {
          "Ref": "controlplaneCloudFrontDistributionBB89BCF1",
        },
        "DistributionPaths": Array [
          "/index.html",
          "/aws-exports.json",
          "/cd8c24d1b341179cf841f05f3171c4dde3bd0e0c942887140a18ead08b76f6d4",
        ],
        "Prune": false,
        "RetainOnDelete": false,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn",
          ],
        },
        "SourceBucketNames": Array [
          Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
        ],
        "SourceObjectKeys": Array [
          "9c602d1b3e5a4b516472e0b593534f44c599d5a940da2d4ef23f3108a2ae0822.zip",
        ],
        "SystemMetadata": Object {
          "cache-control": "max-age=604800",
          "storage-class": "INTELLIGENT_TIERING",
        },
      },
      "Type": "Custom::CDKBucketDeployment",
      "UpdateReplacePolicy": "Delete",
    },
    "RequestValidatorB6FDBF18": Object {
      "Properties": Object {
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
      },
      "Type": "AWS::ApiGateway::RequestValidator",
    },
    "TODOTable8589412C": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "ContributorInsightsSpecification": Object {
          "Enabled": true,
        },
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": Object {
          "SSEEnabled": true,
        },
        "StreamSpecification": Object {
          "StreamViewType": "NEW_AND_OLD_IMAGES",
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "TODOUserPoolB2242677": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AccountRecoverySetting": Object {
          "RecoveryMechanisms": Array [
            Object {
              "Name": "verified_email",
              "Priority": 1,
            },
          ],
        },
        "AdminCreateUserConfig": Object {
          "AllowAdminCreateUserOnly": false,
        },
        "AutoVerifiedAttributes": Array [
          "email",
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": Object {
          "PasswordPolicy": Object {
            "MinimumLength": 12,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
            "TemporaryPasswordValidityDays": 3,
          },
        },
        "Schema": Array [
          Object {
            "Mutable": false,
            "Name": "email",
            "Required": true,
          },
        ],
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserAttributeUpdateSettings": Object {
          "AttributesRequireVerificationBeforeUpdate": Array [
            "email",
          ],
        },
        "UsernameAttributes": Array [
          "email",
        ],
        "VerificationMessageTemplate": Object {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}",
        },
      },
      "Type": "AWS::Cognito::UserPool",
      "UpdateReplacePolicy": "Delete",
    },
    "TODOUserPoolCognitoDomain4908E0CE": Object {
      "Properties": Object {
        "Domain": "todolist-userpool",
        "UserPoolId": Object {
          "Ref": "TODOUserPoolB2242677",
        },
      },
      "Type": "AWS::Cognito::UserPoolDomain",
    },
    "apigatewayroleE6D48DBD": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "dynamodb:UpdateItem",
                    "dynamodb:Scan",
                    "dynamodb:DeleteItem",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::GetAtt": Array [
                      "TODOTable8589412C",
                      "Arn",
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "table",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "controlplaneCloudFrontDistributionBB89BCF1": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W70",
              "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion",
            },
          ],
        },
      },
      "Properties": Object {
        "DistributionConfig": Object {
          "CacheBehaviors": Array [
            Object {
              "AllowedMethods": Array [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE",
              ],
              "CachePolicyId": Object {
                "Ref": "customCachePolicy710E759B",
              },
              "Compress": true,
              "PathPattern": "/prod/*",
              "TargetOriginId": "testcontrolplaneCloudFrontDistributionOrigin2B33D7CA8",
              "ViewerProtocolPolicy": "redirect-to-https",
            },
          ],
          "Comment": "It is managed by ServerlessTODO app.",
          "DefaultCacheBehavior": Object {
            "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
            "Compress": true,
            "TargetOriginId": "testcontrolplaneCloudFrontDistributionOrigin14458A8E7",
            "ViewerProtocolPolicy": "redirect-to-https",
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": true,
          "Logging": Object {
            "Bucket": Object {
              "Fn::GetAtt": Array [
                "controlplaneCloudfrontLoggingBucket7CE6BDBA",
                "RegionalDomainName",
              ],
            },
          },
          "Origins": Array [
            Object {
              "DomainName": Object {
                "Fn::GetAtt": Array [
                  "controlplaneS3Bucket2CBB3164",
                  "RegionalDomainName",
                ],
              },
              "Id": "testcontrolplaneCloudFrontDistributionOrigin14458A8E7",
              "S3OriginConfig": Object {
                "OriginAccessIdentity": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "origin-access-identity/cloudfront/",
                      Object {
                        "Ref": "controlplaneCloudFrontDistributionOrigin1S3OriginE9820082",
                      },
                    ],
                  ],
                },
              },
            },
            Object {
              "CustomOriginConfig": Object {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": Array [
                  "TLSv1.2",
                ],
              },
              "DomainName": Object {
                "Fn::Select": Array [
                  2,
                  Object {
                    "Fn::Split": Array [
                      "/",
                      Object {
                        "Fn::Join": Array [
                          "",
                          Array [
                            "https://",
                            Object {
                              "Ref": "todoappbackendapi8D2202DC",
                            },
                            ".execute-api.",
                            Object {
                              "Ref": "AWS::Region",
                            },
                            ".",
                            Object {
                              "Ref": "AWS::URLSuffix",
                            },
                            "/",
                            Object {
                              "Ref": "todoappbackendapiDeploymentStageprod7F1D5431",
                            },
                            "/",
                          ],
                        ],
                      },
                    ],
                  },
                ],
              },
              "Id": "testcontrolplaneCloudFrontDistributionOrigin2B33D7CA8",
            },
          ],
        },
      },
      "Type": "AWS::CloudFront::Distribution",
    },
    "controlplaneCloudFrontDistributionOrigin1S3OriginE9820082": Object {
      "Properties": Object {
        "CloudFrontOriginAccessIdentityConfig": Object {
          "Comment": "Identity for testcontrolplaneCloudFrontDistributionOrigin14458A8E7",
        },
      },
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    },
    "controlplaneCloudfrontLoggingBucket7CE6BDBA": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for CloudFront Distribution",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "controlplaneCloudfrontLoggingBucketPolicy66645966": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "controlplaneCloudfrontLoggingBucket7CE6BDBA",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "controlplaneCloudfrontLoggingBucket7CE6BDBA",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "controlplaneCloudfrontLoggingBucket7CE6BDBA",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "controlplaneS3Bucket2CBB3164": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": Object {
          "Rules": Array [
            Object {
              "NoncurrentVersionTransitions": Array [
                Object {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 90,
                },
              ],
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": Object {
          "DestinationBucketName": Object {
            "Ref": "controlplaneS3LoggingBucket20CD6DB0",
          },
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": Array [
          Object {
            "Key": "aws-cdk:cr-owned:/:69b200d3",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "controlplaneS3BucketPolicyDB1661F9": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "F16",
              "reason": "Public website bucket policy requires a wildcard principal",
            },
          ],
        },
      },
      "Properties": Object {
        "Bucket": Object {
          "Ref": "controlplaneS3Bucket2CBB3164",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "controlplaneS3Bucket2CBB3164",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "controlplaneS3Bucket2CBB3164",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": Object {
                "CanonicalUser": Object {
                  "Fn::GetAtt": Array [
                    "controlplaneCloudFrontDistributionOrigin1S3OriginE9820082",
                    "S3CanonicalUserId",
                  ],
                },
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::GetAtt": Array [
                        "controlplaneS3Bucket2CBB3164",
                        "Arn",
                      ],
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "controlplaneS3LoggingBucket20CD6DB0": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W35",
              "reason": "This S3 bucket is used as the access logging bucket for another bucket",
            },
          ],
        },
      },
      "Properties": Object {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": Object {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "controlplaneS3LoggingBucketPolicyD24B1A7E": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "controlplaneS3LoggingBucket20CD6DB0",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "Bool": Object {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "controlplaneS3LoggingBucket20CD6DB0",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "controlplaneS3LoggingBucket20CD6DB0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "customCachePolicy710E759B": Object {
      "Properties": Object {
        "CachePolicyConfig": Object {
          "DefaultTTL": 0,
          "MaxTTL": 1,
          "MinTTL": 0,
          "Name": Object {
            "Fn::Join": Array [
              "",
              Array [
                "testcustomCachePolicy3921FC3A-",
                Object {
                  "Ref": "AWS::Region",
                },
              ],
            ],
          },
          "ParametersInCacheKeyAndForwardedToOrigin": Object {
            "CookiesConfig": Object {
              "CookieBehavior": "none",
            },
            "EnableAcceptEncodingBrotli": true,
            "EnableAcceptEncodingGzip": true,
            "HeadersConfig": Object {
              "HeaderBehavior": "whitelist",
              "Headers": Array [
                "authorization",
              ],
            },
            "QueryStringsConfig": Object {
              "QueryStringBehavior": "none",
            },
          },
        },
      },
      "Type": "AWS::CloudFront::CachePolicy",
    },
    "todoAuthFunc71B25BA9": Object {
      "DependsOn": Array [
        "todoAuthFuncServiceRoleDefaultPolicyC4D66451",
        "todoAuthFuncServiceRole8E659A6E",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Object {
          "S3Bucket": Object {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "bd3f4325b711555b8b46f3f421af8339288bc876561454ce37322c5e7a086c60.zip",
        },
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ISSUERS": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "https://cognito-idp.",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ".amazonaws.com/",
                  Object {
                    "Ref": "TODOUserPoolB2242677",
                  },
                ],
              ],
            },
            "RESOURCE_PREFIX": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "arn:",
                  Object {
                    "Ref": "AWS::Partition",
                  },
                  ":execute-api:",
                  Object {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  Object {
                    "Ref": "AWS::AccountId",
                  },
                  ":",
                  Object {
                    "Ref": "todoappbackendapi8D2202DC",
                  },
                ],
              ],
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": Object {
          "Fn::GetAtt": Array [
            "todoAuthFuncServiceRole8E659A6E",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 5,
        "TracingConfig": Object {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "todoAuthFuncServiceRole8E659A6E": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "todoAuthFuncServiceRoleDefaultPolicyC4D66451": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "todoAuthFuncServiceRoleDefaultPolicyC4D66451",
        "Roles": Array [
          Object {
            "Ref": "todoAuthFuncServiceRole8E659A6E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "todoAuthFunctesttodoAuthorizerC3282D69Permissions80597BD5": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "todoAuthFunc71B25BA9",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":",
              Object {
                "Ref": "todoappbackendapi8D2202DC",
              },
              "/authorizers/",
              Object {
                "Ref": "todoAuthorizer28BECB52",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "todoAuthorizer28BECB52": Object {
      "Properties": Object {
        "AuthorizerResultTtlInSeconds": 0,
        "AuthorizerUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Fn::Select": Array [
                  1,
                  Object {
                    "Fn::Split": Array [
                      ":",
                      Object {
                        "Fn::GetAtt": Array [
                          "todoAuthFunc71B25BA9",
                          "Arn",
                        ],
                      },
                    ],
                  },
                ],
              },
              ":apigateway:",
              Object {
                "Fn::Select": Array [
                  3,
                  Object {
                    "Fn::Split": Array [
                      ":",
                      Object {
                        "Fn::GetAtt": Array [
                          "todoAuthFunc71B25BA9",
                          "Arn",
                        ],
                      },
                    ],
                  },
                ],
              },
              ":lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "todoAuthFunc71B25BA9",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
        "IdentitySource": "method.request.header.authorization",
        "IdentityValidationExpression": "^Bearer\\\\s(.*)",
        "Name": "testtodoAuthorizerC3282D69",
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
        "Type": "TOKEN",
      },
      "Type": "AWS::ApiGateway::Authorizer",
    },
    "todoappaccesslogs17D6476B": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "todoappbackendapi8D2202DC": Object {
      "Properties": Object {
        "Name": "todo-app-backend-api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "todoappbackendapiAccountCD5BA139": Object {
      "DeletionPolicy": "Retain",
      "DependsOn": Array [
        "todoappbackendapi8D2202DC",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "todoappbackendapiCloudWatchRole367FAC02",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "todoappbackendapiCloudWatchRole367FAC02": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "todoappbackendapiDeployment0F74DA56a2b6f9c3cb1d7eeaaa5efef100452a18": Object {
      "DependsOn": Array [
        "RequestValidatorB6FDBF18",
        "todoappbackendapitodotodoIdDELETE0F39924D",
        "todoappbackendapitodotodoIdPOST275E728C",
        "todoappbackendapitodotodoId35AD3DC0",
        "todoappbackendapitodoGET50F454FD",
        "todoappbackendapitodoPUT3C8BE992",
        "todoappbackendapitodo214A50F3",
        "todoappbackendapitodomodel8B506559",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "todoappbackendapiDeploymentStageprod7F1D5431": Object {
      "DependsOn": Array [
        "todoappbackendapiAccountCD5BA139",
      ],
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "todoappaccesslogs17D6476B",
              "Arn",
            ],
          },
          "Format": "{\\"requestId\\":\\"$context.requestId\\",\\"ip\\":\\"$context.identity.sourceIp\\",\\"user\\":\\"$context.identity.user\\",\\"caller\\":\\"$context.identity.caller\\",\\"requestTime\\":\\"$context.requestTime\\",\\"httpMethod\\":\\"$context.httpMethod\\",\\"resourcePath\\":\\"$context.resourcePath\\",\\"status\\":\\"$context.status\\",\\"protocol\\":\\"$context.protocol\\",\\"responseLength\\":\\"$context.responseLength\\"}",
        },
        "DeploymentId": Object {
          "Ref": "todoappbackendapiDeployment0F74DA56a2b6f9c3cb1d7eeaaa5efef100452a18",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "MetricsEnabled": true,
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
        "StageName": "prod",
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "todoappbackendapitodo214A50F3": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "todoappbackendapi8D2202DC",
            "RootResourceId",
          ],
        },
        "PathPart": "todo",
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "todoappbackendapitodoGET50F454FD": Object {
      "Properties": Object {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": Object {
          "Ref": "todoAuthorizer28BECB52",
        },
        "HttpMethod": "GET",
        "Integration": Object {
          "Credentials": Object {
            "Fn::GetAtt": Array [
              "apigatewayroleE6D48DBD",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": Array [
            Object {
              "ResponseTemplates": Object {
                "application/json": "#set($inputRoot = $input.path('$'))
[
  #foreach($item in $inputRoot.Items)
  {
    \\"id\\": \\"$item.id.S\\",
    \\"subject\\": \\"$util.escapeJavaScript($item.subject.S)\\",
    \\"description\\": \\"$util.escapeJavaScript($item.description.S)\\",
    \\"dueDate\\": $item.dueDate.N,
    \\"isCompleted\\": $item.isCompleted.BOOL,
    \\"createdTimeInMills\\": $item.createdTimeInMills.N
    #if(\\"$!item.lastModifiedTimeInMills.N\\" != \\"\\")
    ,
    \\"lastModifiedTimeInMills\\": $item.lastModifiedTimeInMills.N
    #end
  }
  #if($foreach.hasNext),#end
  #end
]
",
              },
              "StatusCode": "200",
            },
            Object {
              "ResponseTemplates": Object {
                "text/html": "Error",
              },
              "SelectionPattern": "500",
              "StatusCode": "500",
            },
          ],
          "RequestParameters": Object {
            "integration.request.header.Content-Type": "'application/json'",
          },
          "RequestTemplates": Object {
            "application/json": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "{
  \\"TableName\\": \\"",
                  Object {
                    "Ref": "TODOTable8589412C",
                  },
                  "\\",
  \\"ProjectionExpression\\": \\"id, subject, description, dueDate, createdTimeInMills, lastModifiedTimeInMills, isCompleted\\",
  \\"FilterExpression\\": \\"begins_with(id, :id)\\",
  \\"ExpressionAttributeValues\\": {
      \\":id\\": {\\"S\\": \\"todo-\\"}
  }
}
",
                ],
              ],
            },
          },
          "Type": "AWS",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":dynamodb:action/Scan",
              ],
            ],
          },
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "200",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "400",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "404",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "500",
          },
        ],
        "OperationName": "Get TODOs",
        "RequestParameters": Object {
          "method.request.header.content-type": true,
        },
        "RequestValidatorId": Object {
          "Ref": "RequestValidatorB6FDBF18",
        },
        "ResourceId": Object {
          "Ref": "todoappbackendapitodo214A50F3",
        },
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "todoappbackendapitodoPUT3C8BE992": Object {
      "Properties": Object {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": Object {
          "Ref": "todoAuthorizer28BECB52",
        },
        "HttpMethod": "PUT",
        "Integration": Object {
          "Credentials": Object {
            "Fn::GetAtt": Array [
              "apigatewayroleE6D48DBD",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": Array [
            Object {
              "ResponseTemplates": Object {
                "application/json": "{
  \\"subject\\": \\"$util.escapeJavaScript($input.path('$.Attributes.subject.S')).replaceAll(\\"\\\\\\\\'\\",\\"'\\")\\",
  \\"description\\": \\"$util.escapeJavaScript($input.path('$.Attributes.description.S')).replaceAll(\\"\\\\\\\\'\\",\\"'\\")\\",
  \\"id\\": \\"$input.path('$.Attributes.id.S')\\",
  \\"isCompleted\\": $input.path('$.Attributes.isCompleted.BOOL'),
  \\"createdTimeInMills\\": $input.path('$.Attributes.createdTimeInMills.N'),
  \\"dueDate\\": $input.path('$.Attributes.dueDate.N')
}
",
              },
              "StatusCode": "200",
            },
            Object {
              "ResponseTemplates": Object {
                "application/json": "#if($input.path('$.__type') == \\"com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException\\")
{
  \\"message\\": \\"the todo id already exists.\\"
}
#end",
              },
              "SelectionPattern": "4\\\\d{2}",
              "StatusCode": "400",
            },
            Object {
              "ResponseTemplates": Object {
                "text/html": "Error",
              },
              "SelectionPattern": "500",
              "StatusCode": "500",
            },
          ],
          "RequestParameters": Object {
            "integration.request.header.Content-Type": "'application/json'",
          },
          "RequestTemplates": Object {
            "application/json": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "#set($dueDate = $input.path('$.dueDate'))
#if($!dueDate)
#set($dueDate = -1)
#end
#set($subject = \\"$util.escapeJavaScript($input.path('$.subject'))\\")
#set($description = \\"$util.escapeJavaScript($input.path('$.description'))\\")
{
  \\"TableName\\": \\"",
                  Object {
                    "Ref": "TODOTable8589412C",
                  },
                  "\\",
  \\"Key\\": {
    \\"id\\": {
        \\"S\\": \\"todo-$context.requestId\\"
      }
  },
  \\"UpdateExpression\\": \\"set subject = :s, description = :d, dueDate = :dd, createdTimeInMills = :ct, isCompleted = :ic\\",
  \\"ExpressionAttributeValues\\": {
      \\":s\\": {
        \\"S\\": \\"$subject\\"
      },
      \\":d\\": {
        \\"S\\": \\"$description\\"
      },
      \\":dd\\": {
        \\"N\\": \\"$dueDate\\"
      },
      \\":ct\\": {
        \\"N\\": \\"$context.requestTimeEpoch\\"
      },
      \\":ic\\": {
        \\"BOOL\\": \\"False\\"
      }
  },
  \\"ConditionExpression\\": \\"attribute_not_exists(id)\\",
  \\"ReturnValues\\": \\"ALL_NEW\\"
}
",
                ],
              ],
            },
          },
          "Type": "AWS",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":dynamodb:action/UpdateItem",
              ],
            ],
          },
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "200",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "400",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "404",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "500",
          },
        ],
        "OperationName": "Create TODO item",
        "RequestModels": Object {
          "application/json": Object {
            "Ref": "todoappbackendapitodomodel8B506559",
          },
        },
        "RequestParameters": Object {
          "method.request.header.content-type": true,
        },
        "RequestValidatorId": Object {
          "Ref": "RequestValidatorB6FDBF18",
        },
        "ResourceId": Object {
          "Ref": "todoappbackendapitodo214A50F3",
        },
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "todoappbackendapitodomodel8B506559": Object {
      "Properties": Object {
        "ContentType": "application/json",
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
        "Schema": Object {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "properties": Object {
            "description": Object {
              "type": "string",
            },
            "dueDate": Object {
              "type": "number",
            },
            "subject": Object {
              "type": "string",
            },
          },
          "required": Array [
            "subject",
            "description",
          ],
          "type": "object",
        },
      },
      "Type": "AWS::ApiGateway::Model",
    },
    "todoappbackendapitodotodoId35AD3DC0": Object {
      "Properties": Object {
        "ParentId": Object {
          "Ref": "todoappbackendapitodo214A50F3",
        },
        "PathPart": "{todoId}",
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "todoappbackendapitodotodoIdDELETE0F39924D": Object {
      "Properties": Object {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": Object {
          "Ref": "todoAuthorizer28BECB52",
        },
        "HttpMethod": "DELETE",
        "Integration": Object {
          "Credentials": Object {
            "Fn::GetAtt": Array [
              "apigatewayroleE6D48DBD",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": Array [
            Object {
              "SelectionPattern": "200",
              "StatusCode": "200",
            },
            Object {
              "ResponseTemplates": Object {
                "application/json": "#if($input.path('$.__type') == \\"com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException\\")
{
  \\"message\\": \\"the TODO item does not exist or is not owned by you.\\"
}
#end",
              },
              "SelectionPattern": "400",
              "StatusCode": "400",
            },
            Object {
              "ResponseTemplates": Object {
                "text/html": "Error",
              },
              "SelectionPattern": "500",
              "StatusCode": "500",
            },
          ],
          "RequestParameters": Object {
            "integration.request.header.Content-Type": "'application/json'",
          },
          "RequestTemplates": Object {
            "application/json": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "#set($todoId = \\"$util.escapeJavaScript($input.params('todoId'))\\")  
{
  \\"TableName\\": \\"",
                  Object {
                    "Ref": "TODOTable8589412C",
                  },
                  "\\",
  \\"Key\\": {
    \\"id\\": {
        \\"S\\": \\"todo-$todoId\\"
      }
  }
}
",
                ],
              ],
            },
          },
          "Type": "AWS",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":dynamodb:action/DeleteItem",
              ],
            ],
          },
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "200",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "400",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "404",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "500",
          },
        ],
        "OperationName": "Delete a TODO item",
        "RequestParameters": Object {
          "method.request.header.content-type": true,
        },
        "RequestValidatorId": Object {
          "Ref": "RequestValidatorB6FDBF18",
        },
        "ResourceId": Object {
          "Ref": "todoappbackendapitodotodoId35AD3DC0",
        },
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "todoappbackendapitodotodoIdPOST275E728C": Object {
      "Properties": Object {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": Object {
          "Ref": "todoAuthorizer28BECB52",
        },
        "HttpMethod": "POST",
        "Integration": Object {
          "Credentials": Object {
            "Fn::GetAtt": Array [
              "apigatewayroleE6D48DBD",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": Array [
            Object {
              "ResponseTemplates": Object {
                "application/json": "{
  \\"subject\\": \\"$util.escapeJavaScript($input.path('$.Attributes.subject.S'))\\",
  \\"id\\": \\"$input.path('$.Attributes.id.S')\\",
  \\"description\\": \\"$util.escapeJavaScript($input.path('$.Attributes.description.S'))\\",
  \\"dueDate\\": $input.path('$.Attributes.dueDate.N')\\",
  \\"isCompleted\\": $input.path('$.Attributes.isCompleted.BOOL'),
  \\"createdTimeInMills\\": $input.path('$.Attributes.createdTimeInMills.N'),
  \\"lastModifiedTimeInMills\\": $input.path('$.Attributes.lastModifiedTimeInMills.N'),  
}
",
              },
              "StatusCode": "200",
            },
            Object {
              "ResponseTemplates": Object {
                "application/json": "#if($input.path('$.__type') == \\"com.amazonaws.dynamodb.v20120810#ConditionalCheckFailedException\\")
{
  \\"message\\": \\"the TODO does NOT exists.\\"
}
#end",
              },
              "SelectionPattern": "4\\\\d{2}",
              "StatusCode": "400",
            },
            Object {
              "ResponseTemplates": Object {
                "text/html": "Error",
              },
              "SelectionPattern": "500",
              "StatusCode": "500",
            },
          ],
          "RequestParameters": Object {
            "integration.request.header.Content-Type": "'application/json'",
          },
          "RequestTemplates": Object {
            "application/json": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "#set($dueDate = $input.path('$.dueDate'))
#if($!dueDate)
#set($dueDate = -1)
#end          
#set($subject = \\"$util.escapeJavaScript($input.path('$.subject'))\\")
#set($description = \\"$util.escapeJavaScript($input.path('$.description'))\\")
#set($todoId = \\"$util.escapeJavaScript($input.params('todoId'))\\")  
#set($isCompleted = \\"$input.path('$.isCompleted')\\")
{
  \\"TableName\\": \\"",
                  Object {
                    "Ref": "TODOTable8589412C",
                  },
                  "\\",
  \\"Key\\": {
    \\"id\\": {
        \\"S\\": \\"todo-$todoId\\"
      }
  },
  \\"UpdateExpression\\": \\"set subject = :s, description = :d, dueDate = :dd, lastModifiedTimeInMills = :ct, isCompleted = :ic\\",
  \\"ExpressionAttributeValues\\": {
      \\":s\\": {
        \\"S\\": \\"$subject\\"
      },
      \\":d\\": {
        \\"S\\": \\"$description\\"
      },
      \\":dd\\": {
        \\"N\\": \\"$dueDate\\"
      },
      \\":ct\\": {
        \\"N\\": \\"$context.requestTimeEpoch\\"
      },
      \\":ic\\": {
        \\"BOOL\\": \\"$isCompleted\\"
      }      
  },
  \\"ConditionExpression\\": \\"attribute_exists(id)\\",
  \\"ReturnValues\\": \\"ALL_NEW\\"
}
",
                ],
              ],
            },
          },
          "Type": "AWS",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":apigateway:",
                Object {
                  "Ref": "AWS::Region",
                },
                ":dynamodb:action/UpdateItem",
              ],
            ],
          },
        },
        "MethodResponses": Array [
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "200",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "400",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "404",
          },
          Object {
            "ResponseParameters": Object {
              "method.response.header.Content-Type": true,
            },
            "StatusCode": "500",
          },
        ],
        "OperationName": "Update TODO item",
        "RequestModels": Object {
          "application/json": Object {
            "Ref": "todoappbackendapitodomodel8B506559",
          },
        },
        "RequestParameters": Object {
          "method.request.header.content-type": true,
        },
        "RequestValidatorId": Object {
          "Ref": "RequestValidatorB6FDBF18",
        },
        "ResourceId": Object {
          "Ref": "todoappbackendapitodotodoId35AD3DC0",
        },
        "RestApiId": Object {
          "Ref": "todoappbackendapi8D2202DC",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "userpoolclientDA356A8E": Object {
      "Properties": Object {
        "AllowedOAuthFlows": Array [
          "implicit",
          "code",
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": Array [
          "profile",
          "phone",
          "email",
          "openid",
          "aws.cognito.signin.user.admin",
        ],
        "CallbackURLs": Array [
          "https://example.com",
        ],
        "ExplicitAuthFlows": Array [
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_CUSTOM_AUTH",
          "ALLOW_USER_SRP_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH",
        ],
        "ReadAttributes": Array [
          "email",
          "email_verified",
          "nickname",
          "preferred_username",
        ],
        "SupportedIdentityProviders": Array [
          "COGNITO",
        ],
        "UserPoolId": Object {
          "Ref": "TODOUserPoolB2242677",
        },
        "WriteAttributes": Array [
          "email",
          "nickname",
          "preferred_username",
        ],
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
