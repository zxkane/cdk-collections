openapi: "3.0.3"
info:
  title: "restful-api-to-sqs"
  version: "v1.0.0"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"  
servers:
- url:
  variables:
    basePath:
      default: ""
paths:
  /i:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |-
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                {}
    post:
      description: "Writing sessions, metrics and events"
      operationId: "sendEvents"
      parameters:
      - name: "content-type"
        in: "header"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/events"
        required: true
      responses:
        "404":
          description: "404 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
        "200":
          description: "200 response"
          headers:
            Content-Type:
              schema:
                type: "string"
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        "400":
          description: "400 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
        "500":
          description: "500 response"
          headers:
            Content-Type:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-request-validator: "requestvalidator"
      x-amazon-apigateway-integration:
        credentials: "{{integrationRoleArn}}"
        httpMethod: "POST"
        uri: "arn:${AWS::Partition}:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/{{queueName}}"
        responses:
          "4\\d{2}":
            statusCode: "400"
            responseTemplates:
              application/json: "#if($input.path('$.Error.Code') == \"InvalidMessageContents\"\
                )\n{\n  \"message\": \"The message contains characters outside the\
                \ allowed set.\"\n}\n#elseif($input.path('$.Error.Code') == \"AWS.SimpleQueueService.UnsupportedOperation\"\
                )\n{\n  \"message\": \"Unsupported operation.\"\n}\n#else\n{\n  \"\
                message\": \"$input.path('$.Error.Code')\"\n}\n#end"
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "{\n  \"result\": \"Success\"\n}\n"
            responseParameters:
              "method.response.header.Access-Control-Allow-Origin": '''*'''              
          "5\\d{2}":
            statusCode: "500"
            responseTemplates:
              application/json: "{\"result\": \"internal error\"}"
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/x-www-form-urlencoded: "Action=SendMessage&MessageBody=$util.base64Encode($input.body)\
            &MessageAttribute.1.Name=encoding&MessageAttribute.1.Value.StringValue=base64&MessageAttribute.1.Value.DataType=String\
            &MessageAttribute.2.Name=sourceIp&MessageAttribute.2.Value.StringValue=$context.identity.sourceIp&MessageAttribute.2.Value.DataType=String\
            &MessageAttribute.3.Name=apiTimestamp&MessageAttribute.3.Value.StringValue=$context.requestTimeEpoch&MessageAttribute.3.Value.DataType=Number"
        passthroughBehavior: "when_no_match"
        type: "aws"
        timeoutInMillis: 2000
components:
  schemas:
    events:
      type: object
      required:
        - app_key
        - device_id
      properties:
        app_key:
          type: string
          example: d7d3f96f594f26acd566577a1501e3c82c7ba8fc
        device_id:
          type: string
          example: b452f74e-4770-48f9-b850-eac57240d547
x-amazon-apigateway-request-validators:
  requestvalidator:
    validateRequestParameters: true
    validateRequestBody: false